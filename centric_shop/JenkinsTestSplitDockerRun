pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                dir('centric_shop') {
                script {
                // Install bundle and change the user
                    sh 'bundle install'
                    sh 'su jenkins'
                }
            }
        }
     }

        stage('Divide Test Cases') {
            steps {
                dir('centric_shop') {
                script {
                    sh 'ruby divide_test_case.rb'
                }
            }
        }
    }

        stage('Run Test Cases') {
            steps {
                dir('centric_shop') {
                script {
                    // Retrieve the list of suites generated by cuke-slicer
                    def suites = sh(returnStdout: true, script: 'ls -1 suite_*.feature').trim().split('\n')
                    println "Feature Files : ${suites}"
                    println "Total Suites : ${suites.size()}"

                    for (int i = 0; i < suites.size(); i++) {
                        def suite = suites[i]
                        def testSuite = readFile "${suite}"
                        println "--- Running suite ${suite} containing feature file ${testSuite} ---"
                        def testExitCode = sh script: "bundle exec cucumber ${testSuite} --tags '@functional'", returnStatus: true
                        echo "Test Exit Code: ${testExitCode}"
                        if (testExitCode != 0) {
                            echo "Some tests failed in ${suite} from ${testSuite}, but continuing..."
                        }
                    }
                }
            }
        }}

        stage('Create Test Suites Again'){
            steps {
                dir('centric_shop'){
                    script {
                      // Retrieve the list of suites generated by cuke-slicer
                      def suites = sh(returnStdout: true, script: 'ls -1 suite_*.feature').trim().split('\n')

                      // Divide the suites into two groups
                      def group1 = suites[0..suites.size()/2-1]
                      echo "Group 1 : ${group1}"
                      def group2 = suites[suites.size()/2..-1]
                      echo "Group 2: ${group2}"

                      // Store the suite groupings as environment variables
                      env.GROUP1 = group1.join(',')
                      echo "${env.GROUP1}"

                      // Stash the env.Group1 value
                      stash includes: 'env.GROUP1', name: 'Group1'

                      env.GROUP2 = group2.join(',')
                      echo "${env.GROUP2}"

                      // Stash the env.Group2 value
                      stash includes: 'env.GROUP2', name: 'Group2'

                    }
                }
            }
        }

        stage('Run Test Suites in Parallel') {
            parallel {
                stage('Suite 1'){
                    agent {
                        dockerfile {
                            dir 'centric_shop'
                        }
                    }
                    steps {
                        dir('centric_shop'){
                        script {
                            sh 'bundle install'
                            sh 'Xvfb :1 -screen 0 1600x1200x16 &'
                            sh 'export DISPLAY=:1.0'
                            sh 'su slave'

                            // Retrieve the suite group 1 from environment variable
                            unstash 'Group1'
                            def suitesGroup1 = env.GROUP1.split(',')
                            // Run the test cases from suite group 1 on the Jenkins slave
                            for (def suite : suitesGroup1) {
                                echo "SuiteGroup is : ${suitesGroup1}"
                                echo "Suite name is : ${suite}"

                                def testSuite = readFile "${suite}"
                                echo "TestSuite content is: ${testSuite}"

                                println "--- Running suite ${suite} containing feature file ${testSuite} ---"
                                def testExitCode = sh script: "bundle exec cucumber ${testSuite} --tags '@functional'", returnStatus: true
                                echo "Test Exit Code: ${testExitCode}"

                                if (testExitCode != 0) {
                                    echo "Some tests failed in ${suite} from feature file ${testSuite}, but continuing..."
                                }
                            }
                        }
                    }
                }}
                stage('Suite 2'){
                    agent {
                        dockerfile {
                            dir 'centric_shop'
                        }
                    }
                    steps {
                        dir('centric_shop'){
                        script {
                            sh 'bundle install'
                            sh 'Xvfb :1 -screen 0 1600x1200x16 &'
                            sh 'export DISPLAY=:1.0'
                            sh 'su slave'

                            // Retrieve the suite group 2 from environment variable
                            unstash 'Group2'
                            def suitesGroup2 = env.GROUP2.split(',')
                            // Run the test cases from suite group 2 on the Jenkins slave
                            for (def suite : suitesGroup2) {
                                echo "SuiteGroup is : ${suitesGroup2}"
                                echo "Suite name is : ${suite}"

                                def testSuite = readFile "${suite}"
                                echo "TestSuite content is: ${testSuite}"

                                println "--- Running suite ${suite} containing feature file ${testSuite} ---"
                                def testExitCode = sh script: "bundle exec cucumber ${testSuite} --tags '@functional'", returnStatus: true
                                echo "Test Exit Code: ${testExitCode}"

                                if (testExitCode != 0) {
                                    echo "Some tests failed in ${suite} from feature file ${testSuite}, but continuing..."
                                }
                            }
                        }
                    }}
                }
            }
        }}
        post {
            success {
                echo "All stages executed successfully..."
            }
        }
    }
